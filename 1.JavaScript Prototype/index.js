/*
const person = {
    name: 'Maxim',
    age: 25,
    greet: function() {
        console.log('Greet!')
    }
}*/

const person = new Object({
        name: 'Maxim',
        age: 25,
        greet: function() {
            console.log('Greet!')
        }
    })


/*Можно обратиться к прототипу глобального объекта и в нем создать новый метод
* создаем метод sayHello, данный метод теперь будет доступен и у объекта person*/
Object.prototype.sayHello = function() {
    console.log('Hello!')
}
/*Метод create глобального объекта создает обект, а в качестве аргумента принимает объект
* прототип которого будет помещен в созданный обект, в данном случае у объекта elena в прототипе
* сперва будет идти прототип объекта person, а за ним прототип Object*/
const elena = Object.create(person)

/*Данное поле со значением будет добавлено в прототип уже самого объекта elena
* при это в ниже идущем прототипе унаследованном от объекта person так же будет храниться свое поле name
* при выводе elena.name берется поле из самого верхнего прототипа, если там нет такого поля со значением, тогда
* проверяется следующий унаследованный прототип, до тех пор пока не будет найдено искомое поле либо не
* закончатся прототипы у объекта*/
elena.name = 'Elena'